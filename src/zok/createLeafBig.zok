import "hashes/blake2/blake2s" as blake2s; //NOTE: must use quantum- and length-extension- resistant hash function
import "utils/casts/u32_array_to_bool_array" as to_bits;

def shiftRight3Bits(u32[8] input) -> field {
    bool[256] input_as_bits = to_bits(input);
    // Shift right 3 bits, and convert to field
    // Forked from: https://github.com/Zokrates/ZoKrates/blob/deploy/zokrates_stdlib/stdlib/utils/pack/bool/pack.zok
    field mut out = 0;
    for u32 j in 0..253 {
        u32 i = 253 - (j + 1);
        out = out + (input_as_bits[i] ? 2 ** j : 0);
    }
    return out;
}

def main(u32[5] address, private u32[4] secret, private u32[7] creds1, private u32[16] creds2) -> field {
    u32[2][16] preimage = [[...address, ...creds1, ...secret], creds2];
    return shiftRight3Bits(blake2s(preimage));
}
